@model InstgramWebApp.ViewModels.UserPost
@{
    ViewData["css"] = new string[1] { "~/Content/CSS/emojionearea.min.css" };
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using InstgramWebApp.Controllers
@using InstgramWebApp.Extensions
<style>
    button:hover, button:focus {
        border: none !important;
        outline: none !important;
        cursor: pointer;
    }
</style>

<section class="main">

    <div class="col-md-4">

        <!-- Posts section -->


        <div class="post">
            <div class="info">
                <div class="user">

                    <a href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=Model.Post.CreatorID},Request)" style="text-decoration:none;">
                        <div class="profile-pic"><img src="@Model.Post.Creator.ImgPath" alt=""></div>
                    </a>

                    <a href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=Model.Post.CreatorID},Request)" style="text-decoration:none;">
                        <p class="username">@Model.Post.Creator.Username</p>
                    </a>
                </div>
                @if (Model.User.Id == Model.Post.CreatorID)
                {
                    using (Html.BeginForm("DeletePost", "Post", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.Hidden("postId", @Model.Post.Id)
                        <button type="submit" class="delete" style="border: none; background-color: transparent;"><i class="fas fa-trash"></i></button>
                    }
                }
            </div>
            @if (Model.Post.PostFiles != null)
            {
                <div class="status-wrapper-post" id="scrollSection" style="height: auto;">
                    @foreach (var postImages in Model.Post.PostFiles)
                    {
                        if (postImages.PostID == Model.Post.Id)
                        {
                            if (postImages.FilePath.Contains(".mp4"))
                            {
                                <video id="vidpost" controls>
                                    <source src="@postImages.FilePath" type="video/mp4">
                                    <source src="@postImages.FilePath" type="video/ogg">
                                </video>
                            }
                            else
                            {
                                <img src="@postImages.FilePath" class="post-image" alt="">
                            }

                        }

                    }

                </div>
            }
            else
            {
                <div class="status-wrapper-post" id="scrollSection" style="height: auto;">
                    <img src="~/Content/img/not_found.jpg" class="post-image" alt="">
                </div>
            }

        <div class="post-content">
            <div class="reaction-wrapper">
                @using (Html.BeginForm("", "Post", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.Hidden("postId", Model.Post.Id)
                    var flag = 0;
                    foreach (var react in Model.Post.PostReacts)
                    {
                        if (react.ReactorID == Model.User.Id && react.Reaction == "like")
                        {
                            flag++;
                            break;
                        }
                    }
                  if (flag == 0)
                        {
                            <button type="submit" name="action" value="LikeSingle" style=" border: none; background-color: white; margin-right: 20px;margin-top:2px;display:flex;"><img src="~/Content/img/like.PNG" height="25" width="27" alt=""></button>
                        }
                        else
                        {
                            <button type="submit" name="action" value="DislikeSingle" style=" border: none; background-color: white; margin-right: 20px;display:flex;"><img src="~/Content/img/LikeRed.png" height="30" alt=""></button>
                        }

                }
                <img src="~/Content/img/comment.PNG" onclick="$('#@Model.Post.Id').focus()" class="icon" alt="">
                <img src="~/Content/img/send.PNG" class="icon" alt="">
                <img src="~/Content/img/save.PNG" class="save icon" alt="">
            </div>
            <p class="likes">@Model.Post.NoOfLikes likes</p>

            <p class="description">
                <a style="color:black;text-decoration:none;" href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=Model.Post.Creator.Id},Request)"><span style="color:black;">@Model.Post.Creator.Username</span></a>@Model.Post.Caption
            </p>

            @if (Model.Post.Comments != null)
            {
                
                foreach (var comment in Model.Post.Comments)
                {
                    if (comment.PostID == Model.Post.Id)
                    {

                        if (comment.CreatorID == Model.User.Id)
                        {
                            using (Html.BeginForm("UnCommentSinglePost", "Post", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.Hidden("commentId", @comment.Id)
                                @Html.Hidden("postId", @Model.Post.Id)
                                <button type="submit" class="delete" style="float: right; font-size: 10px; border: none; background-color: white;margin-top:3px;"><i class="fas fa-times-circle"></i></button>
                            }
                        }
                        <p class="description">
                            <a style="color:black;text-decoration:none;" href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=comment.Creator.Id},Request)"><span>@comment.Creator.Username</span></a>@comment.CommentText
                        </p>
                    }
                }
            }
            @if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalMinutes < 1)
            {
                <p class="post-time">JUST NOW</p>
            }
            else if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalMinutes > 1 && @DateTime.Now.Subtract(@Model.Post.PostedOn).TotalMinutes < 60)
            {
                <p class="post-time">@DateTime.Now.Subtract(@Model.Post.PostedOn).Minutes MINUTES AGO</p>
            }
            else if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalMinutes == 60)
            {
                <p class="post-time">1 HOUR AGO</p>
            }
            else if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays < 1)
            {
                <p class="post-time">@DateTime.Now.Subtract(@Model.Post.PostedOn).Hours HOURS AGO</p>
            }
            else if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays == 1)
            {
                <p class="post-time">1 DAY AGO</p>
            }
            else if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays > 1 && @DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays < 30)
            {
                <p class="post-time">@DateTime.Now.Subtract(@Model.Post.PostedOn).Days DAYS AGO</p>
            }
            else if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays > 29 && @DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays < 31)
            {
                <p class="post-time">1 MONTH AGO</p>
            }
            else if (@DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays > 30 && @DateTime.Now.Subtract(@Model.Post.PostedOn).TotalDays < 256)
            {
                <p class="post-time">@Model.Post.PostedOn.ToString("MMMM,d").ToUpperInvariant()</p>
            }
            else
            {
                <p class="post-time">@Model.Post.PostedOn.ToString("MMMM,d,yyyy").ToUpperInvariant()</p>
            }
        </div>
            @using (Html.BeginForm("CommentSinglePost", "Post", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.Hidden("postId", @Model.Post.Id)
                <div class="comment-wrapper">
                    <div class="emoji @Model.Post.Id"></div>

                    <input type="text" class="comment-box" name="CommentText" id="@Model.Post.Id" required placeholder="Add a comment..." style="margin-left:7px;">
                    <button class="comment-btn" type="submit">post</button>
                </div>
            }
        </div>

    </div>
    <!--Posts section-->

</section>


<script src="~/Scripts/emojionearea.min.js"></script>
<script>

    $(document).ready(function () {

        var $allEmojiPickers = $(".emoji");
        $allEmojiPickers.emojioneArea({
            hideSource: true,
            standalone: true,
            pickerPosition: window.matchMedia('(min-width: 300px) and (max-width: 767px)').matches ? "right" : "top",
            filtersPosition: "bottom",
            autocomplete: false,
            textcomplete: {
                maxCount: 15,
                placement: null
            },
            events: {
                emojibtn_click: function (button, event) {
                    let classesInCaller = this.source.attr('class').split(/\s+/);
                    let IDOfTextarea = classesInCaller[classesInCaller.length - 1];
                    $(`#${IDOfTextarea}`).val($(`#${IDOfTextarea}`).val() + $(this.source)[0].emojioneArea.getText());
                }
            }
        });
    })
</script>
<script>

    (function () {
        const videoPost = document.querySelectorAll("video");
        const post = document.getElementsByClassName("post")[0];
        videoPost.forEach(vid => {
            vid.setAttribute("width", post.clientWidth);
        })

    })();

window.addEventListener('resize', function (event) {
    const videoPost = document.querySelectorAll("video");
    const post = document.getElementsByClassName("post")[0];
    videoPost.forEach(vid => {
        vid.setAttribute("width", post.clientWidth);
    })
}, true);
</script>