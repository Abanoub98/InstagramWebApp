@model  InstgramWebApp.ViewModels.HomeViews

@{
    ViewData["css"] = new string[1] { "~/Content/CSS/emojionearea.min.css" };
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using InstgramWebApp.Controllers
@using InstgramWebApp.Extensions
<style>
    button:hover, button:focus {
        border: none !important;
        outline: none !important;
        cursor: pointer;
    }
</style>
<section class="main">
    <div class="wrapper">
        <div class="left-col">
            <!--Story section-->
            <div class="status-wrapper" id="scrollSection">
                @if (Model.Stories.Count != 0)
                {
                    if (Model.user.Stories.Count == 0)
                    {
                        <div class="status-card" style="margin-bottom:20px;">
                            <a href="@Url.GenerateHref(nameof(PostController.Create),nameof(PostController),Request)" style="text-decoration: none;">
                                <div class="profile-pic" style="background: none;"><img src="@Model.user.ImgPath" alt=""></div>
                                <i class="fas fa-plus" style="display:flex;justify-content:center; "></i>
                            </a>
                        </div>
                    }

                    foreach (var story in Model.Stories)
                    {

                        <div class="status-card">
                            <a href="@Url.GenerateHref(nameof(HomeController.StoryView),nameof(HomeController),new {controller="Profile",id=story.Id}, Request)" style="text-decoration: none;">
                                @if (story.CreatorID == Model.user.Id)
                                {
                                    <div class="profile-pic" style="background: linear-gradient(45deg, #3897f0, rgb(0 0 0) 80%);"><img src="@story.Creator.ImgPath" alt=""></div>
                                }
                                else
                                {
                                    <div class="profile-pic"><img src="@story.Creator.ImgPath" alt=""></div>
                                }

                                <p class="username" style="margin-top:0px;">@story.Creator.Username</p>
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="status-card" style="margin-bottom:27px;">
                        <a href="@Url.GenerateHref(nameof(PostController.Create),nameof(PostController),Request)" style="text-decoration: none;">
                            <div class="profile-pic" style="background: none;"><img src="@Model.user.ImgPath" alt=""></div>
                            <i class="fas fa-plus" style="display:flex;justify-content:center; "></i>
                        </a>
                    </div>
                }



            </div>
            <!--Story section-->
            <!-- Posts section -->

            @if (Model.Posts.Count != 0)
            {
                foreach (var post in Model.Posts)
                {
                    
        <div class="post">
          
            <div class="info">
                <div class="user">

                    <a href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=post.CreatorID},Request)" style="text-decoration:none;">
                        <div class="profile-pic"><img src="@post.Creator.ImgPath" alt=""></div>
                    </a>

                    <a href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=post.CreatorID},Request)" style="text-decoration:none;">
                        <p class="username">@post.Creator.Username</p>
                    </a>
                </div>
                @if (post.CreatorID == Model.user.Id)
                {
                    using (Html.BeginForm("DeletePost", "Post", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.Hidden("postId", @post.Id)
                        <button type="submit" class="delete" style="border: none; background-color: transparent;"><i class="fas fa-trash"></i></button>
                    }
                }


                </div>
            <div class="status-wrapper-post" id="scrollSection" style="height: auto;">

                @if (post.PostFiles.Count != 0)
                {
                    foreach (var postImages in post.PostFiles)
                    {
                        if (postImages.PostID == post.Id)
                        {
                            if (postImages.FilePath.Contains(".mp4"))
                            {
                                <video id="vidpost" controls>
                                    <source src="@postImages.FilePath" type="video/mp4">
                                    <source src="@postImages.FilePath" type="video/ogg">
                                </video>
                            }
                            else
                            {
                                <img src="@postImages.FilePath" class="post-image" alt="">
                            }

                        }

                    }
                }
                else
                {
                    <img src="~/Content/img/not_found.jpg" class="post-image" alt="">
                }
         
            </div>
            <div class="post-content">
                <div class="reaction-wrapper">
                    @using (Html.BeginForm("", "Post", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.Hidden("postId", @post.Id)
                        var flag = 0;
                        foreach (var react in post.PostReacts)
                        {
                            if (react.ReactorID == Model.user.Id && react.Reaction == "like")
                            {
                                flag++;
                                break;
                            }
                        }
                        if (flag == 0)
                        {
                            <button type="submit" name="action" value="Like" style=" border: none; background-color: white; margin-right: 20px;margin-top:2px;display:flex;"><img src="~/Content/img/like.PNG" height="25" width="27" alt=""></button>
                        }
                        else
                        {
                            <button type="submit" name="action" value="Dislike" style=" border: none; background-color: white; margin-right: 20px;display:flex;"><img src="~/Content/img/LikeRed.png" height="30" alt=""></button>
                        }

                    }
                    <img src="~/Content/img/comment.PNG" onclick="$('#@post.Id').focus()" class="icon" alt="">
                    <img src="~/Content/img/send.PNG" class="icon" alt="">
                    <img src="~/Content/img/save.PNG" class="save icon" alt="">
                </div>
                <p class="likes">@post.NoOfLikes likes</p>
                <p class="description">
                    <a style="color:black;text-decoration:none;" href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=post.Creator.Id},Request)"><span style="color:black;">@post.Creator.Username</span></a>@post.Caption
                </p>
                @if (post.Comments.Count != 0)
                {
                    var counter=0;
                    if (post.Comments.Count > 2)
                    {
                        <a href="@Url.GenerateHref(nameof(PostController.Details),nameof(PostController),new {controller="Post",id=post.Id},Request)" style="text-decoration:none;cursor:pointer;"><p style="color: #989898;">View all @post.Comments.Count comments</p></a>
                    }


                    foreach (var comment in post.Comments)
                    {
                        if (comment.PostID == post.Id)
                        {
                            if (comment.CreatorID == Model.user.Id)
                            {
                                using (Html.BeginForm("UnCommentHomePost", "Post", FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.Hidden("commentId", @comment.Id)
                                    <button type="submit" class="delete" style="float: right; font-size: 10px; border: none; background-color: white;margin-top:3px;"><i class="fas fa-times-circle"></i></button>
                                }
                            }
                            <p class="description">
                                <a style="color:black;text-decoration:none;" href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=comment.Creator.Id},Request)"><span>@comment.Creator.Username</span></a>@comment.CommentText
                            </p>
                            counter++;
                            if(counter==2)
                            {
                                break;
                            }

                        }
                    }
                }
                @if (@DateTime.Now.Subtract(@post.PostedOn).TotalMinutes < 1)
                {
                    <p class="post-time">JUST NOW</p>
                }
                else if (@DateTime.Now.Subtract(@post.PostedOn).TotalMinutes > 1 && @DateTime.Now.Subtract(@post.PostedOn).TotalMinutes < 60)
                {
                    <p class="post-time">@DateTime.Now.Subtract(@post.PostedOn).Minutes MINUTES AGO</p>
                }
                else if (@DateTime.Now.Subtract(@post.PostedOn).TotalMinutes == 60)
                {
                    <p class="post-time">1 HOUR AGO</p>
                }
                else if (@DateTime.Now.Subtract(@post.PostedOn).TotalDays < 1)
                {
                    <p class="post-time">@DateTime.Now.Subtract(@post.PostedOn).Hours HOURS AGO</p>
                }
                else if (@DateTime.Now.Subtract(@post.PostedOn).TotalDays == 1)
                {
                    <p class="post-time">1 DAY AGO</p>
                }
                else if (@DateTime.Now.Subtract(@post.PostedOn).TotalDays > 1 && @DateTime.Now.Subtract(@post.PostedOn).TotalDays < 30)
                {
                    <p class="post-time">@DateTime.Now.Subtract(@post.PostedOn).Days DAYS AGO</p>
                }
                else if (@DateTime.Now.Subtract(@post.PostedOn).TotalDays > 29 && @DateTime.Now.Subtract(@post.PostedOn).TotalDays < 31)
                {
                    <p class="post-time">1 MONTH AGO</p>
                }
                else if (@DateTime.Now.Subtract(@post.PostedOn).TotalDays > 30 && @DateTime.Now.Subtract(@post.PostedOn).TotalDays < 256)
                {
                    <p class="post-time">@post.PostedOn.ToString("MMMM,d").ToUpperInvariant()</p>
                }
                else
                {
                    <p class="post-time">@post.PostedOn.ToString("MMMM,d,yyyy").ToUpperInvariant()</p>
                }

            </div>
            @using (Html.BeginForm("CommentHomePost", "Post", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.Hidden("postId", @post.Id)
                <div class="comment-wrapper">
                    <div class="emoji @post.Id"></div>

                    <input type="text" class="comment-box" name="CommentText" id="@post.Id" required placeholder="Add a comment..." style="margin-left:7px;">
                    <button class="comment-btn" type="submit">post</button>
                </div>
            }
           
        </div>
                  

                }
            }
            else
            {
                <div class="post" style="margin-top: 27px;">
                    <div style="height: auto;">
                        <img src="~/Content/img/no-posts-yet.png" class="post-image" height="410" alt="">
                        <a href="@Url.GenerateHref(nameof(PostController.Create),nameof(PostController),Request)" style=" display: flex; justify-content: center; text-decoration: none; background-color: rgb(0, 162, 255); color: white;">Create Post</a>
                    </div>
                </div>
            }

            <!--Posts section-->
        </div> <!--End Left-Col-->
        <!-- Suggestion section -->
        <div class="right-col">
            <div class="profile-card">
                <div class="profile-pic">
                    <a href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=Model.user.Id},Request)" style="text-decoration:none;">
                        <img src="@Model.user.ImgPath" alt="">
                        </a>
                </div>
                <div>
                    <a href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=Model.user.Id},Request)" style="text-decoration:none;">
                        <p class="username" style="text-align:start;">@Model.user.Username</p>
                        </a>
                        <p class="sub-text">@Model.user.FName @Model.user.LName</p>
</div>
            </div>
            @if (Model.Users.Count != 0)
            {
                var counter = 0;
                <p class="suggestion-text">Suggestions for you</p>

                foreach (var user in Model.Users)
                {
                    if (counter < 6)
                    {
                        <div class="profile-card">
                            <div class="profile-pic">
                                <img src="@user.ImgPath" alt="">
                            </div>
                            <div>
                                <a href="@Url.GenerateHref(nameof(ProfileController.Index),nameof(ProfileController),new {controller="Profile",id=user.Id},Request)" style="text-decoration:none;"><p class="username" style="text-align:start;">@user.Username</p></a>
                                <p class="sub-text">@user.FriendShips.Count Friends</p>
                            </div>
                        </div>
                        counter++;
                    }



                }
            }
            else
            {
                <p class="suggestion-text">No suggestions for you</p>
            }


            <p style="font-weight: 100;color: #c7c7c7; font-size: 12px;">© 2022 INSTAGRAM BY ABANOUB RAFAAT</p>
        </div>
        <!-- Suggestion section -->
    </div>
</section>


<script src="~/Scripts/emojionearea.min.js"></script>
<script>

    $(document).ready(function () {

        var $allEmojiPickers = $(".emoji");
        $allEmojiPickers.emojioneArea({
            hideSource: true,
            standalone: true,
            pickerPosition: window.matchMedia('(min-width: 300px) and (max-width: 767px)').matches ? "right" : "top",
            filtersPosition: "bottom",
            autocomplete: false,
            textcomplete: {
                maxCount: 15,
                placement: null
            },
            events: {
                emojibtn_click: function (button, event) {
                    let classesInCaller = this.source.attr('class').split(/\s+/);
                    let IDOfTextarea = classesInCaller[classesInCaller.length - 1];
                    $(`#${IDOfTextarea}`).val($(`#${IDOfTextarea}`).val() + $(this.source)[0].emojioneArea.getText());
                }
            }
        });
    })
</script>
<script>
 
        (function () {
            const videoPost = document.querySelectorAll("video");
            const post = document.getElementsByClassName("post")[0];
            videoPost.forEach(vid => {
                vid.setAttribute("width", post.clientWidth);
            })
           
        })();

    window.addEventListener('resize', function (event) {
        const videoPost = document.querySelectorAll("video");
        const post = document.getElementsByClassName("post")[0];
        videoPost.forEach(vid => {
            vid.setAttribute("width", post.clientWidth);
        })
        }, true);
</script>